from time import time
from functools import cache


X = [
    4,
    8,
    16,
    2,
    10,
    14,
    1,
    4,
    6,
    46,
    1,
    5,
    2,
    2,
    25,
    4,
    13,
    5,
    4,
    14,
    13,
    22,
    20,
    1,
    4,
    18,
    5,
    4,
    1,
    25,
    13,
    7,
    1,
    7,
    11,
    6,
    4,
    2,
    2,
    7,
    2,
    8,
    12,
    16,
    10,
    3,
    4,
    19,
    1,
    29,
    10,
    9,
    15,
    3,
    2,
    10,
    4,
    12,
    27,
    9,
    5,
    1,
    3,
    1,
    2,
    3,
    2,
    8,
    1,
    2,
    2,
    27,
    4,
    2,
    7,
    1,
    4,
    5,
    3,
    1,
    11,
    5,
    6,
    1,
    14,
    4,
    7,
    23,
    5,
    1,
    70,
    4,
    2,
    63,
    11,
    15,
    16,
    7,
    6,
    6,
    2,
    2,
    52,
    12,
    6,
    12,
    1,
    1,
    8,
    1,
    7,
    7,
    2,
    1,
    6,
    55,
    5,
    33,
    8,
    1,
    6,
    2,
    90,
    11,
    5,
    6,
    16,
    4,
    4,
    1,
    6,
    3,
    6,
    2,
    1,
    6,
    1,
    9,
    3,
    4,
    9,
    2,
    2,
    2,
    3,
    3,
    7,
    17,
    1,
    2,
    1,
    6,
    2,
    3,
    4,
    2,
    3,
    56,
    8,
    2,
    126,
    2,
    1,
    7,
    26,
    4,
    5,
    1,
    4,
    3,
    4,
    31,
    4,
    4,
    2,
    8,
    10,
    6,
    6,
    6,
    6,
    2,
    2,
    3,
    29,
    7,
    3,
    31,
    9,
    8,
    2,
    1,
    12,
    4,
    2,
    3,
    7,
    2,
    2,
    1,
    2,
    3,
    1,
    1,
    17,
    7,
    2,
    10,
    1,
    4,
    6,
    2,
    3,
    6,
    61,
    33,
    1,
    2,
    6,
    2,
    4,
    3,
    23,
    55,
    45,
    2,
    15,
    2,
    12,
    18,
    2,
    2,
    6,
    5,
    6,
    2,
    3,
    8,
    63,
    85,
    3,
    5,
    35,
    91,
    6,
    2,
    5,
    16,
    4,
    1,
    2,
    6,
    5,
    19,
    4,
    4,
    8,
    2,
    2,
    2,
    5,
    5,
    20,
    6,
    2,
    3,
    4,
    64,
    12,
    15,
    5,
    4,
    21,
    4,
    1,
    6,
    1,
    2,
    11,
    1,
    1,
    1,
    1,
    7,
    2,
    7,
    15,
    2,
    34,
    9,
    8,
    5,
    1,
    7,
    15,
    24,
    2,
    14,
    3,
    2,
    4,
    1,
    3,
    2,
    9,
    4,
    1,
    9,
    16,
    2,
    9,
    4,
    3,
    1,
    4,
    1,
    1,
    16,
    3,
    3,
    7,
    19,
    9,
    2,
    16,
    3,
    29,
    51,
    1,
    4,
    20,
    3,
    6,
    4,
    75,
    4,
    4,
    15,
    35,
    5,
    27,
    3,
    8,
    1,
    9,
    6,
    1,
    1,
    6,
    3,
    2,
    6,
    2,
    4,
    3,
    6,
    3,
    3,
    2,
    11,
    3,
    3,
    1,
    30,
    1,
    45,
    2,
    9,
    19,
    5,
    9,
    1,
    6,
    3,
    6,
    5,
    2,
    4,
    20,
    10,
    16,
    1,
    1,
    10,
    1,
    3,
    17,
    6,
    5,
    6,
    4,
    4,
    15,
    4,
    6,
    2,
    1,
    6,
    8,
    2,
    10,
    2,
    22,
    8,
    6,
    1,
    4,
    35,
    13,
    4,
    1,
    1,
    3,
    4,
    4,
    4,
    8,
    2,
    6,
    2,
    11,
    4,
    5,
    1,
    2,
    4,
    1,
    6,
    4,
    24,
    20,
    13,
    4,
    2,
    12,
    16,
    5,
    3,
    4,
    6,
    15,
    4,
    7,
    5,
    8,
    7,
    4,
    4,
    4,
    12,
    2,
    6,
    5,
    8,
    9,
    6,
    1,
    2,
    21,
    12,
    6,
    3,
    24,
    7,
    2,
    43,
    1,
    3,
    13,
    2,
    6,
    1,
    12,
    4,
    2,
    8,
    4,
    5,
    2,
    15,
    28,
    1,
    2,
    17,
    3,
    1,
    6,
    8,
    1,
    7,
    6,
    2,
    1,
    3,
    2,
    20,
    1,
    24,
    8,
    8,
    4,
    2,
    2,
    1,
    3,
    18,
    1,
    10,
    4,
    2,
    6,
    2,
    9,
    35,
    1,
    1,
    37,
    11,
    5,
    9,
    20,
    6,
    3,
    2,
    10,
    3,
    17,
    8,
    6,
    1,
    28,
    2,
    6,
    31,
    9,
    2,
    2,
    7,
    3,
    5,
    3,
    16,
    2,
    1,
    2,
    13,
    4,
    1,
    1,
    10,
    1,
    2,
    4,
    47,
    16,
    1,
    2,
    2,
    18,
    12,
    12,
    6,
    10,
    8,
    2,
    18,
    8,
    3,
    4,
    1,
    2,
    10,
    1,
    2,
    4,
    6,
    13,
    3,
    3,
    2,
    4,
    1,
    10,
    12,
    5,
    2,
    34,
    2,
    2,
    1,
    4,
    6,
    4,
    9,
    20,
    1,
    3,
    4,
    2,
    2,
    4,
    1,
    1,
    10,
    5,
    3,
    1,
    4,
    11,
    1,
    7,
    16,
    38,
    10,
    12,
    3,
    9,
    1,
    3,
    1,
    2,
    6,
    8,
    3,
    20,
    5,
    2,
    2,
    1,
    1,
    1,
    4,
    10,
    3,
    6,
    2,
    4,
    4,
    6,
    4,
    1,
    40,
    1,
    13,
    4,
    1,
    5,
    91,
    16,
    11,
    1,
    1,
    4,
    1,
    4,
    1,
    7,
    4,
    2,
    8,
    6,
    9,
    35,
    1,
    1,
    2,
    2,
    24,
    2,
    6,
    13,
    14,
    6,
    4,
    7,
    7,
    3,
    2,
    8,
    6,
    20,
    2,
    4,
    2,
    1,
    17,
    1,
    1,
    6,
    4,
    21,
    2,
    6,
    6,
    29,
    4,
    7,
    3,
    8,
    7,
    11,
    1,
    5,
    5,
    8,
    3,
    2,
    6,
    1,
    1,
    4,
    3,
    4,
    2,
    1,
    25,
    2,
    6,
    12,
    3,
    2,
    3,
    2,
    4,
    3,
    1,
    1,
    4,
    2,
    2,
    10,
    2,
    8,
    5,
    2,
    10,
    12,
    1,
    6,
    2,
    2,
    8,
    9,
    1,
    1,
    2,
    16,
    7,
    11,
    22,
    4,
    6,
    89,
    5,
    3,
    3,
    1,
    3,
    2,
    12,
    6,
    12,
    3,
    2,
    4,
    1,
    16,
    15,
    14,
    4,
    15,
    14,
    3,
    1,
    3,
    7,
    4,
    46,
    1,
    10,
    70,
    3,
    4,
    1,
    2,
    2,
    10,
    4,
    2,
    2,
    1,
    6,
    12,
    2,
    24,
    3,
    3,
    3,
    1,
    2,
    8,
    2,
    1,
    4,
    3,
    3,
    10,
    10,
    4,
    1,
    6,
    2,
    6,
    10,
    9,
    7,
    2,
    4,
    6,
    6,
    6,
    2,
    3,
    2,
    2,
    22,
    2,
    8,
    4,
    7,
    2,
    15,
    2,
    6,
    11,
    7,
    5,
    12,
    3,
    3,
    1,
    3,
    10,
    4,
    15,
    2,
    2,
    6,
    2,
    18,
    8,
    2,
    2,
    17,
    4,
    2,
    43,
    3,
    2,
    9,
    13,
    2,
    1,
    1,
    3,
    7,
    3,
    9,
    16,
    2,
    6,
    12,
    12,
    1,
    2,
    5,
    1,
    3,
    4,
    6,
    3,
    1,
    2,
    3,
    1,
    7,
    4,
    1,
    1,
    5,
    3,
    3,
    1,
    10,
    9,
    1,
    2,
    4,
    4,
    3,
    40,
    2,
    2,
    32,
    1,
    3,
    4,
    10,
    4,
    3,
    3,
    2,
    4,
    8,
    6,
    3,
    2,
    1,
    8,
    6,
    2,
    2,
    2,
    2,
    6,
    6,
    3,
    2,
    2,
    3,
    4,
    10,
    1,
    6,
    25,
    4,
    14,
    34,
    1,
    9,
    45,
    1,
    2,
    16,
    5,
    4,
    4,
    2,
    1,
    2,
    16,
    12,
    7,
    14,
    3,
    2,
    6,
    16,
    13,
    3,
    3,
    3,
    9,
    20,
    2,
    4,
    1,
    2,
    4,
    1,
    7,
    1,
    4,
    4,
    16,
    1,
    2,
    2,
    4,
    4,
    2,
    3,
    2,
    3,
    6,
    4,
    11,
    3,
    1,
    1,
    1,
    1,
    6,
    31,
    6,
    4,
    1,
    56,
    12,
    1,
]

f = open("data12.txt", "r")
data = f.read().strip()
f.close()


@cache
def get_ways(s: str, needed) -> int:
    # print("IN FUNC", s, needed)
    if len(needed) == 0:
        if "#" in s:
            return 0
        return 1

    if len(s) == 0 and len(needed) > 0:
        return 0

    total = 0
    n = needed[0]

    if s[0] == "#":
        if "." in s[:n]:
            return 0

    for i in range(0, len(s) - n + 1):
        # print("loop", i)
        if i > 0 and s[i - 1] == "#":
            continue
        if i + n < len(s) and s[i + n] == "#":
            continue
        sub = s[i : i + n]
        # print(f"Checking {sub} at {i} of {s}  {needed}")
        if all([x == "#" or x == "?" for x in sub]):
            total += get_ways(s[i + n + 1 :], needed[1:])
    # print(s, needed, "returning", total)
    return total


rows = []
for d in data.split("\n"):
    a, b = d.split(" ")
    nums = [int(x) for x in b.split(",")]
    rows.append((a, *nums))

# print(rows)

t0 = time()
ways = [get_ways(x[0], x[1:]) for x in rows]
print(f"{time() - t0}s")
# print(ways)

wrong = 0
for i in range(len(ways)):
    if ways[i] != X[i]:
        print(f"DIFFERENT {i+1}. {rows[i]} got {ways[i]} expected {X[i]}")
        wrong += 1
print(f"Correct: {round(100 * (1 - wrong / len(ways)), 4)}%")
print(f"Part I  = {sum(ways)}")

# 10230 too high
# 9888 too high


# print(rows)
rows5 = [((f"{r[0]}?" * 5)[:-1], *(r[1:] + r[1:] + r[1:] + r[1:] + r[1:])) for r in rows]
# print(rows5)

t0 = time()
ways2 = [get_ways(x[0], x[1:]) for x in rows5]
print(f"{time() - t0}s")
print(f"Part II = {sum(ways2)}")
